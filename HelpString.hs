module HelpString where

helpDesc = [
  "============================================",
  "** primitives **",
  "   +, -, *, /",
  "   mod, quotient, remainder",
  "   =, <, >, /=, >=, <=, &&, ||",
  "   string=?, string?, string<=?, string>=?",
  "   car, cdr, cons, eq?, eqv?",
  "============================================",
  "** primitive defined functions **",
  "   quote  : make list.",
  "   display: display string.",
  "   newline: display empty line.",
  "   set!   : set variable.",
  "   let*   : let variable recursively.",
  "   let    : let variable linierly",
  "   begin  : perform evaluation imparatively.",
  "   define : define variable of function.",
  "   lambda : perform lambda calculation.",
  "   if     : basic logic statement.",
  "   cond   : strong logic statement.",
  "   help   : show help",
  "  estimate: estimate time on evaluation",
  "   list   : list elements",
  "============================================",
  "** abstract defined functions **",
  "   not    : reverse logic result.",
  "   null?  : '() -> #t, not #f",
  "   foldr  : fold each element of list, start from right.",
  "   foldl  : fold each element of list, start from left.",
  "   map    : map each element of list",
  "   filter : filter each element of list",
  "   nil    : empty list equals to '()",
  "   abs    : mathmatical calculation.",
  "   or     : logic calculation performs on many operands.",
  "   and    : logic calculation performs on many operands.",
  "   length : list length",
  "   sum    : sum list",
  "   product: product list",
  "   reverse: reverse list",
  "   fibo   : perform fibonacci sequence",
  "   append : append two lists",
  "   flatmap: perform flatmap op",
  "   enumerate-interval: make list sequence",
  "============================================",
  "** additional description **",
  "  * closure is available.",
  "  * variable scope is available.",
  "============================================",
  "ex) fibonacci sequence",
  "(define (fibo n) (if (< n 3) 1 (+ (fibo (- n 1)) (fibo (- n 2)))))"
  ]